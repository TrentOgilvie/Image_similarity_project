# Install Required Libraries (if needed)
!pip install tensorflow scikit-image matplotlib opencv-python-headless

import numpy as np
import cv2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate
import matplotlib.pyplot as plt
from skimage import exposure
from google.colab import files
import os

# Helper Functions
def preprocess_image(image_path, size=(256, 256)):
    """
    Preprocess the input image: resizing and normalization.
    """
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # Convert to RGB
    image = cv2.resize(image, size) # Resize to model input size
    image = image / 255.0 # Normalize pixel values
    return image

def unet_model(input_shape=(256, 256, 3)):
    """
    Build a simple U-Net architecture.
    """
    inputs = Input(shape=input_shape)

    # Encoder
    c1 = Conv2D(64, (3, 3), activation='relu', padding='same')(inputs)
    c1 = Conv2D(64, (3, 3), activation='relu', padding='same')(c1)
    p1 = MaxPooling2D((2, 2))(c1)

    c2 = Conv2D(128, (3, 3), activation='relu', padding='same')(p1)
    c2 = Conv2D(128, (3, 3), activation='relu', padding='same')(c2)
    p2 = MaxPooling2D((2, 2))(c2)

    # Bottleneck
    c3 = Conv2D(256, (3, 3), activation='relu', padding='same')(p2)
    c3 = Conv2D(256, (3, 3), activation='relu', padding='same')(c3)

    # Decoder
    u1 = UpSampling2D((2, 2))(c3)
    u1 = concatenate([u1, c2])
    c4 = Conv2D(128, (3, 3), activation='relu', padding='same')(u1)
    c4 = Conv2D(128, (3, 3), activation='relu', padding='same')(c4)

    u2 = UpSampling2D((2, 2))(c4)
    u2 = concatenate([u2, c1])
    c5 = Conv2D(64, (3, 3), activation='relu', padding='same')(u2)
    c5 = Conv2D(64, (3, 3), activation='relu', padding='same')(c5)

    outputs = Conv2D(1, (1, 1), activation='sigmoid')(c5)

    model = Model(inputs, outputs)
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# File Uploads
print("Please upload the two images (before and after).")
uploaded_files = files.upload()

# Save Uploaded Files
image_paths = list(uploaded_files.keys())
if len(image_paths) != 2:
    raise ValueError("Please upload exactly two images: one for 'before' and one for 'after'.")

# Preprocess Images
image1 = preprocess_image(image_paths[0])
image2 = preprocess_image(image_paths[1])

# Stack images for input
combined_input = np.stack([image1, image2], axis=0)

# Simulated Training Data (Placeholder for Actual Training)
X_train = np.random.rand(10, 256, 256, 3) # Random placeholder training images
Y_train = np.random.randint(0, 2, (10, 256, 256, 1)) # Random binary masks

# Train Model
model = unet_model()
model.fit(X_train, Y_train, epochs=10, batch_size=2, verbose=1)

# Predict Changes
diff = np.abs(image1 - image2) # Simple absolute difference
diff = (diff - diff.min()) / (diff.max() - diff.min()) # Normalize Difference

# Predict with Model
predicted_mask = model.predict(np.expand_dims(diff, axis=0))[0, :, :, 0]

# Visualize Results
plt.figure(figsize=(15, 5))

plt.subplot(1, 4, 1)
plt.title("Image Before")
plt.imshow(image1)

plt.subplot(1, 4, 2)
plt.title("Image After")
plt.imshow(image2)

plt.subplot(1, 4, 3)
plt.title("Difference (Absolute)")
plt.imshow(diff, cmap='gray')

plt.subplot(1, 4, 4)
plt.title("Predicted Change Mask")
plt.imshow(predicted_mask, cmap='hot')

plt.tight_layout()
plt.show()